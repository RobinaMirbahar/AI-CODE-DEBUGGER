import os
import streamlit as st
import google.generativeai as genai
import requests
import json
import re
import time
from pygments.lexers import guess_lexer, PythonLexer
from e2b import Sandbox

# ======================
# Configuration
# ======================
# Set up API keys
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY") or st.secrets["GEMINI"]["api_key"]
E2B_API_KEY = os.getenv("E2B_API_KEY") or st.secrets["E2B"]["api_key"]

# Initialize Gemini for Vision Agent
genai.configure(api_key=GEMINI_API_KEY)
vision_model = genai.GenerativeModel('gemini-pro-vision')

# Initialize Open Interpreter for Coding Agent
# (Assuming o3-mini is installed and configured locally)
# o3-mini setup instructions: https://github.com/open-interpreter/o3-mini

# Initialize E2B for Execution Agent
# E2B setup instructions: https://e2b.dev/docs

# ======================
# Vision Agent (Gemini 2.0 Pro)
# ======================
def extract_problem_from_image(image):
    """Extract coding problem and requirements from an uploaded image."""
    try:
        response = vision_model.generate_content(["Extract the coding problem and requirements from this image.", image])
        return response.text
    except Exception as e:
        return f"Error extracting problem from image: {str(e)}"

# ======================
# Coding Agent (o3-mini)
# ======================
def generate_code(problem_description):
    """Generate optimized code solutions with proper documentation and type hints."""
    try:
        # Use o3-mini to generate code
        # Example: o3-mini.generate_code(problem_description)
        # For now, we'll simulate this with a placeholder
        code = f"""
# Generated by Coding Agent (o3-mini)
def solve_problem():
    \"\"\"
    {problem_description}
    \"\"\"
    # TODO: Implement the solution
    pass
"""
        return code
    except Exception as e:
        return f"Error generating code: {str(e)}"

# ======================
# Execution Agent (E2B)
# ======================
def execute_code_in_sandbox(code):
    """Execute the generated code in a secure sandbox environment."""
    try:
        # Initialize E2B sandbox
        sandbox = Sandbox(api_key=E2B_API_KEY)

        # Run the code in the sandbox
        result = sandbox.run_python(code)
        return result
    except Exception as e:
        return f"Error executing code in sandbox: {str(e)}"

# ======================
# Streamlit Interface
# ======================
def main():
    st.set_page_config(page_title="AI Coding Team", page_icon="ü§ñ", layout="wide")
    st.title("ü§ñ AI Coding Team")
    st.write("Solve coding problems with a team of specialized AI agents!")

    # Input options
    input_type = st.radio("Choose input type:", ["Text", "Image"])

    if input_type == "Text":
        problem_description = st.text_area("Enter the coding problem:", height=150)
    else:
        uploaded_image = st.file_uploader("Upload an image of the coding problem:", type=["png", "jpg", "jpeg"])
        if uploaded_image:
            st.image(uploaded_image, caption="Uploaded Image", use_column_width=True)
            problem_description = extract_problem_from_image(uploaded_image)
            st.write("Extracted Problem Description:")
            st.write(problem_description)

    # Analyze button
    if st.button("üöÄ Solve Problem"):
        if not problem_description.strip():
            st.warning("‚ö†Ô∏è Please provide a coding problem.")
            return

        with st.spinner("üîç Analyzing..."):
            # Step 1: Generate code using Coding Agent
            st.subheader("Generated Code")
            generated_code = generate_code(problem_description)
            st.code(generated_code, language="python")

            # Step 2: Execute code using Execution Agent
            st.subheader("Execution Results")
            execution_result = execute_code_in_sandbox(generated_code)
            st.write(execution_result)

            # Step 3: Display results
            st.subheader("Final Output")
            st.write("The problem has been solved! üéâ")

# Run the app
if __name__ == "__main__":
    main()
